#pragma checksum "E:\Blazor\ShootingRange\ShootingRange.Client\Pages\Contact.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cf3fa84d1cb2b077412d0ad829e1f7d01a9fe402"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ShootingRange.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Blazor\ShootingRange\ShootingRange.Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Blazor\ShootingRange\ShootingRange.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Blazor\ShootingRange\ShootingRange.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Blazor\ShootingRange\ShootingRange.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Blazor\ShootingRange\ShootingRange.Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Blazor\ShootingRange\ShootingRange.Client\_Imports.razor"
using ShootingRange.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Blazor\ShootingRange\ShootingRange.Client\_Imports.razor"
using ShootingRange.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Blazor\ShootingRange\ShootingRange.Client\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Blazor\ShootingRange\ShootingRange.Client\Pages\Contact.razor"
using ShootingRange.Shared.Dto;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/contact")]
    public partial class Contact : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 31 "E:\Blazor\ShootingRange\ShootingRange.Client\Pages\Contact.razor"
       

    [Parameter]
    public string Info {get; set;} = "Info";
    private const string URL = "http://localhost:5005";
    private List<ContactDto> contacts = null;
    private ApiResponseDto apiResponseDto;

    protected override async Task OnInitializedAsync()
    {
        // forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        // forecasts = await Http.GetJsonAsync<WeatherForecast[]>("${URL}+WeatherForecast");
        await  GetContactsFromApi();
    }
    public async Task GetContactsFromApi()
    {
        // apiResponseDto = await Http.GetJsonAsync<ApiResponseDto>($"api/Admin/Users?pageSize={pageSize}&pageNumber={currentPage}");
        apiResponseDto = await Http.GetJsonAsync<ApiResponseDto>($"{URL}/api/Contact/GetAll");

        if (apiResponseDto.StatusCode == 200)
        {
            Info = "ApiResponseDto == 200";
            contacts = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ContactDto>>(apiResponseDto.Result.ToString());
        }
        else
        {
            Info = "ApiResponseDto != 200";
        }
    }

    public class ContactDto
    {
        public long? Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public byte Gender { get; set; }
        public DateTime? Birth { get; set; }
        public string Techno { get; set; }
        public string Message { get; set; }
    }

            public class Car
            {
                public string Name { get; set; }
                public double Price { get; set; }
                public int Horsepower { get; set; }
 
                public Car(string name, double price, int horsepower)
                {
                    Name = name;
                    Price = price;
                    Horsepower = horsepower;
                }
            }
 
            Car[] cars = new[]
            {
                new Car("Volkswagen Golf", 10000, 220),
                new Car("Volkswagen Passat", 11000, 240),
                new Car("Volkswagen Polo", 12000, 110),
                new Car("Ford Focus", 13000, 200),
                new Car("Ford Fiesta", 14000, 160),
                new Car("Ford Fusion", 15000, 260),
                new Car("Ford Mondeo", 16000, 120),
            };
 
        

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster matToaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
