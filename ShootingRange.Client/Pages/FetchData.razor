@page "/fetchdata"
@using ShootingRange.Shared.Dto
@inject HttpClient Http
@inject IMatToaster matToaster

<h1>Weather forecast</h1>
<h2>Info @Info</h2>

<MatButton @onclick="WeatherForecastAsync">Test</MatButton>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Loading Users</label>
    </LoadingBackground>
}
else
{
    <MatTable Class="mat-elevation-z5" Items="@forecasts" LoadInitialData="true" Striped="true" RequestApiOnlyOnce="true" ApiUrl="http://localhost:5000/api/WeatherForecast"
              DebounceMilliseconds="150">
        <MatTableHeader>
            <th><MatButton Label="Refresh" @onclick="WeatherForecastAsync"></MatButton></th>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </MatTableHeader>
        <MatTableRow Context="ForecastRow">
            <td>
                <div style="width:155px;">
                </div>
            </td>

            <td><div style="width:130px;">@ForecastRow.Date</div></td>
            <td>@ForecastRow.TemperatureC</td>
            <td>@ForecastRow.TemperatureF</td>
            <td>@ForecastRow.Summary</td>
        </MatTableRow>
    </MatTable>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    bool createUserDialogOpen = false;
    private const string URL = "http://localhost:5005";

    //private WeatherForecast[] forecasts;
    private List<WeatherForecast> forecasts;
    private ApiResponseDto apiResponseDto;

    [Parameter]
    public string Info {get; set;} = "Info";

    protected override async Task OnInitializedAsync()
    {
        // forecasts = await Http.GetJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        // forecasts = await Http.GetJsonAsync<WeatherForecast[]>("${URL}+WeatherForecast");
        await  WeatherForecastAsync();
    }

    public async Task WeatherForecastAsync()
    {
        // apiResponseDto = await Http.GetJsonAsync<ApiResponseDto>($"api/Admin/Users?pageSize={pageSize}&pageNumber={currentPage}");
        apiResponseDto = await Http.GetJsonAsync<ApiResponseDto>($"{URL}/api/WeatherForecast");

        if (apiResponseDto.StatusCode == 200)
        {
            Info = "ApiResponseDto == 200";
            forecasts = Newtonsoft.Json.JsonConvert.DeserializeObject<List<WeatherForecast>>(apiResponseDto.Result.ToString());
        }
        else
        {
            Info = "ApiResponseDto != 200";
        }
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
